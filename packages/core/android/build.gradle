buildscript {
    def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['lottiereactnative_kotlinVersion']

    repositories {
        google()
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:7.2.2")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

def getExtOrDefault(name, defaultValue) {
    rootProject.ext.has(name) ? rootProject.ext.get(name) : defaultValue
}

def isNewArchitectureEnabled() {
    // To opt-in for the New Architecture, you can either:
    // - Set `newArchEnabled` to true inside the `gradle.properties` file
    // - Invoke gradle with `-newArchEnabled=true`
    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

if (isNewArchitectureEnabled()) {
    apply plugin: 'com.facebook.react'
}

import groovy.json.JsonSlurper

// https://github.com/callstack/react-native-builder-bob/discussions/359
def registrationCompat = {
  def reactNativeManifest = file("$projectDir/../../react-native/package.json")
  def reactNativeVersion = new JsonSlurper().parseText(reactNativeManifest.text).version as String
  // Fabric was introduced at react-native@0.68, full CMake support were introduced at react-native@0.71
  // Use Android.mk for compatibility with react-native@0.68/0.69
  reactNativeVersion.matches('(0.68.*|0.69.*)')
}()

def codegenViewLibraryName = "lottiereactnative"
def codegenViewModuleName = {
  // Autolink for Fabric uses codegenConfig.name in package.json since react-native@0.70
  // Use codegenViewLibraryName for compatibility with react-native@0.68/0.69
  def libraryManifestJson = new JsonSlurper().parseText(file("$projectDir/../package.json").text)
  registrationCompat ? codegenViewLibraryName : libraryManifestJson.codegenConfig.name
}()

def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }

android {
    def agpVersion = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION
    // Check AGP version for backward compatibility reasons
    if (agpVersion.tokenize('.')[0].toInteger() >= 7) {
        namespace = "com.airbnb.android.react.lottie"
    }

    compileSdk getExtOrDefault('compileSdkVersion', 31)

    // Used to override the NDK path/version on internal CI or by allowing
    // users to customize the NDK path/version from their root project (e.g. for M1 support)
    if (rootProject.hasProperty("ndkPath")) {
        ndkPath rootProject.ext.ndkPath
    }
    if (rootProject.hasProperty("ndkVersion")) {
        ndkVersion rootProject.ext.ndkVersion
    }

    defaultConfig {
        minSdkVersion getExtOrDefault('minSdkVersion', 21)
        targetSdkVersion getExtOrDefault('targetSdkVersion', 31)
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

        ndk {
            abiFilters(*reactNativeArchitectures())
        }

        buildConfigField "String", "CODEGEN_MODULE_REGISTRATION", (isNewArchitectureEnabled() && registrationCompat ? "\"${codegenViewModuleName}_registration\"" : "null")

        if (isNewArchitectureEnabled() && registrationCompat) {
            def reactAndroidProject = project(':ReactAndroid')
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_PLATFORM=android-21",
                                "APP_STL=c++_shared",
                                "NDK_TOOLCHAIN_VERSION=clang",
                                "GENERATED_SRC_DIR=$buildDir/generated/source", // for react_codegen_* in this library's codegen/jni
                                "PROJECT_BUILD_DIR=${appProject.buildDir}", // for REACT_NDK_EXPORT_DIR in ReactAndroid's Android-prebuilt.mk
                                "REACT_ANDROID_DIR=${reactAndroidProject.projectDir}",
                                "REACT_ANDROID_BUILD_DIR=${reactAndroidProject.buildDir}",
                                "CODEGEN_MODULE_NAME=$codegenViewModuleName"
                    cFlags "-Wall", "-Werror", "-fexceptions", "-frtti", "-DWITH_INSPECTOR=1"
                    cppFlags "-std=c++17"
                    targets "${codegenViewModuleName}_registration"
                }
            }
        }
    }

    if (isNewArchitectureEnabled() && registrationCompat) {
        // We configure the NDK build only if you decide to opt-in for the New Architecture.
        externalNativeBuild {
            ndkBuild {
                path "Android.mk"
            }
        }
    }

    packagingOptions {
        exclude "**/libreact_render*.so"
    }

    packagingOptions {
        excludes = [
            "META-INF",
            "META-INF/**",
            "**/libc++_shared.so",
            "**/libfabricjni.so",
            "**/libfbjni.so",
            "**/libjsi.so",
            "**/libfolly_json.so",
            "**/libfolly_runtime.so",
            "**/libglog.so",
            "**/libreact_codegen_rncore.so",
            "**/libreact_debug.so",
            "**/libreact_nativemodule_core.so",
            "**/libreact_render_componentregistry.so",
            "**/libreact_render_core.so",
            "**/libreact_render_debug.so",
            "**/libreact_render_graphics.so",
            "**/librrc_view.so",
            "**/libruntimeexecutor.so",
            "**/libturbomodulejsijni.so",
            "**/libyoga.so",
        ]
    }

    sourceSets {
        main {
            if (isNewArchitectureEnabled()) {
                java.srcDirs += ['src/newarch', "${project.buildDir}/generated/source/codegen/java"]
            } else {
                java.srcDirs += ['src/oldarch']
            }
        }
    }
}

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

repositories {
    google()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url "$projectDir/../node_modules/react-native/android"
    }
    mavenCentral()
}

def kotlin_version = getExtOrDefault('kotlinVersion', project.properties['lottiereactnative_kotlinVersion'])

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //noinspection GradleDynamicVersion
    implementation 'com.facebook.react:react-native:+' // From node_modules

    implementation "com.airbnb.android:lottie:6.1.0"
}

if (isNewArchitectureEnabled()) {
  // rncli & react-native-gradle-plugin use codegenConfig in package.json since react-native@0.70
  // Use react{} for compatibility with react-native@0.68/0.69
  react {
    jsRootDir = file("../src/specs")
    libraryName = codegenViewLibraryName
    codegenJavaPackageName = "com.airbnb.android.react.lottie"
  }

  afterEvaluate {
    preDebugBuild.dependsOn appProject.tasks['preDebugBuild']
    preReleaseBuild.dependsOn appProject.tasks['preReleaseBuild']

    // Due to a bug inside AGP, we have to explicitly set a dependency
    // between configureNdkBuild* tasks and the preBuild tasks.
    // This can be removed once this is solved: https://issuetracker.google.com/issues/207403732
    tasks.findByName('configureNdkBuildDebug')?.dependsOn preDebugBuild
    tasks.findByName('configureNdkBuildRelease')?.dependsOn preReleaseBuild
    reactNativeArchitectures().each { architecture ->
      tasks.findByName("configureNdkBuildDebug[${architecture}]")?.configure {
        dependsOn("preDebugBuild")
      }
      tasks.findByName("configureNdkBuildRelease[${architecture}]")?.configure {
        dependsOn("preReleaseBuild")
      }
    }
  }
}